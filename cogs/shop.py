import discord
from discord.ext import commands
from discord.ui import View, Button, Select
import json
from utils.file_manager import get_user, update_user
from utils.embeds import success_embed, error_embed, base_embed

# ==============================
#  DANH S√ÅCH KHUNG ·∫¢NH
# ==============================
FRAMES_SHOP = {
    "frame_basic": {
        "name": "üíï Khung C∆° B·∫£n",
        "price": 0,
        "url": "https://media.tenor.com/GFJg0P5OljEAAAAC/love-couple.gif",
        "description": "Khung m·∫∑c ƒë·ªãnh cho m·ªçi c·∫∑p ƒë√¥i"
    },
    "frame_cute": {
        "name": "üå∏ Khung D·ªÖ Th∆∞∆°ng",
        "price": 500,
        "url": "https://media.tenor.com/ExlcsKkFAtUAAAAC/cute-anime-couple.gif",
        "description": "Khung anime couple si√™u ƒë√°ng y√™u"
    },
    "frame_romantic": {
        "name": "üíñ Khung L√£ng M·∫°n",
        "price": 1000,
        "url": "https://media.tenor.com/KSH5iQ2KzfwAAAAC/anime-couple-love.gif",
        "description": "Khung t√¨nh y√™u l√£ng m·∫°n ng·ªçt ng√†o"
    },
    "frame_luxury": {
        "name": "üíé Khung Sang Tr·ªçng",
        "price": 2000,
        "url": "https://media.tenor.com/kcR14mcX2nUAAAAC/anime-couple.gif",
        "description": "Khung cao c·∫•p d√†nh cho ƒë√¥i VIP"
    },
    "frame_sakura": {
        "name": "üå∏ Khung Hoa Anh ƒê√†o",
        "price": 1500,
        "url": "https://media.tenor.com/7vKQH_RgC9AAAAAC/anime-couple-kiss.gif",
        "description": "Khung m√πa xu√¢n l√£ng m·∫°n Nh·∫≠t B·∫£n"
    },
    "frame_starry": {
        "name": "‚≠ê Khung ƒê√™m Sao",
        "price": 1800,
        "url": "https://media.tenor.com/dZW9JqH0JAYAAAAC/anime-couple-love.gif",
        "description": "Khung ƒë√™m ƒë·∫ßy sao cho couple m∆° m·ªông"
    }
}

# ==============================
#  H√ÄM LOAD D·ªÆ LI·ªÜU SHOP
# ==============================
def load_shop_items():
    with open("data/config.json", "r", encoding="utf-8") as f:
        data = json.load(f)
    return data.get("shop_items", {})

# ==============================
#  MODAL NH·∫¨P S·ªê L∆Ø·ª¢NG QU√Ä
# ==============================
async def open_quantity_modal(interaction: discord.Interaction, item_name: str):
    class QuantityModal(discord.ui.Modal, title=f"üí∞ Mua {item_name}"):
        quantity = discord.ui.TextInput(
            label="Nh·∫≠p s·ªë l∆∞·ª£ng mu·ªën mua",
            placeholder="V√≠ d·ª•: 3",
            style=discord.TextStyle.short
        )

        async def on_submit(self, modal_interaction: discord.Interaction):
            try:
                qty = int(self.quantity.value)
                if qty <= 0:
                    raise ValueError
            except ValueError:
                await modal_interaction.response.send_message(
                    embed=error_embed("‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!"),
                    ephemeral=True
                )
                return

            await handle_purchase(modal_interaction, item_name, qty)

    await interaction.response.send_modal(QuantityModal())

# ==============================
#  X·ª¨ L√ù MUA QU√Ä
# ==============================
async def handle_purchase(interaction: discord.Interaction, item_name: str, quantity: int):
    shop_items = load_shop_items()
    item = shop_items.get(item_name)

    if not item:
        await interaction.response.send_message(embed=error_embed("‚ùå M√≥n qu√† n√†y kh√¥ng t·ªìn t·∫°i!"), ephemeral=True)
        return

    total_price = item["price"] * quantity
    user = get_user(interaction.user.id)

    if user["xu"] < total_price:
        await interaction.response.send_message(embed=error_embed("üí∏ B·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ mua m√≥n n√†y!"), ephemeral=True)
        return

    # Tr·ª´ xu & th√™m v√†o inventory
    user["xu"] -= total_price
    user.setdefault("inventory", {})
    user["inventory"][item_name] = user["inventory"].get(item_name, 0) + quantity
    update_user(interaction.user.id, user)

    await interaction.response.send_message(
        embed=success_embed(f"üõçÔ∏è B·∫°n ƒë√£ mua **{quantity}x {item_name}** v·ªõi gi√° **{total_price} xu** üíò"),
        ephemeral=True
    )

# ==============================
#  X·ª¨ L√ù MUA KHUNG ·∫¢NH
# ==============================
async def handle_frame_purchase(interaction: discord.Interaction, frame_id: str):
    frame = FRAMES_SHOP.get(frame_id)
    
    if not frame:
        await interaction.response.send_message(embed=error_embed("‚ùå Khung n√†y kh√¥ng t·ªìn t·∫°i!"), ephemeral=True)
        return

    user = get_user(interaction.user.id)
    
    # Ki·ªÉm tra ƒë√£ s·ªü h·ªØu ch∆∞a
    owned_frames = user.get("owned_frames", ["frame_basic"])
    if frame_id in owned_frames:
        await interaction.response.send_message(
            embed=error_embed(f"‚ùå B·∫°n ƒë√£ s·ªü h·ªØu khung **{frame['name']}** r·ªìi!"),
            ephemeral=True
        )
        return

    # Ki·ªÉm tra xu
    if user["xu"] < frame["price"]:
        await interaction.response.send_message(
            embed=error_embed(f"üí∏ B·∫°n kh√¥ng ƒë·ªß xu! C·∫ßn **{frame['price']} xu** ƒë·ªÉ mua khung n√†y."),
            ephemeral=True
        )
        return

    # Ki·ªÉm tra c√≥ ƒëang y√™u ai kh√¥ng
    if not user.get("love_partner"):
        await interaction.response.send_message(
            embed=error_embed("üíî B·∫°n c·∫ßn c√≥ ng∆∞·ªùi y√™u tr∆∞·ªõc khi mua khung ·∫£nh couple!"),
            ephemeral=True
        )
        return

    # Tr·ª´ xu & th√™m khung v√†o danh s√°ch s·ªü h·ªØu
    user["xu"] -= frame["price"]
    owned_frames.append(frame_id)
    user["owned_frames"] = owned_frames
    user["current_frame"] = frame_id  # T·ª± ƒë·ªông set l√†m khung hi·ªán t·∫°i
    update_user(interaction.user.id, user)

    # C·∫≠p nh·∫≠t khung cho ng∆∞·ªùi y√™u lu√¥n
    partner_id = user["love_partner"]
    partner_data = get_user(partner_id)
    partner_owned = partner_data.get("owned_frames", ["frame_basic"])
    if frame_id not in partner_owned:
        partner_owned.append(frame_id)
        partner_data["owned_frames"] = partner_owned
    partner_data["current_frame"] = frame_id
    update_user(partner_id, partner_data)

    embed = success_embed(
        f"üéâ Mua khung th√†nh c√¥ng!\n\n"
        f"B·∫°n ƒë√£ mua **{frame['name']}** v·ªõi gi√° **{frame['price']} xu**\n"
        f"Khung ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng cho c·∫£ 2 ng∆∞·ªùi! üíñ"
    )
    embed.set_image(url=frame["url"])
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

# ==============================
#  VIEW CH√çNH SHOP
# ==============================
class ShopMainView(View):
    def __init__(self, user_id):
        super().__init__(timeout=180)
        self.user_id = user_id

    @discord.ui.button(label="üéÅ Mua Qu√† T·∫∑ng", style=discord.ButtonStyle.primary, row=0)
    async def buy_gifts(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Kh√¥ng ph·∫£i shop c·ªßa b·∫°n!", ephemeral=True)
            return
        
        await show_gifts_shop(interaction)

    @discord.ui.button(label="üñºÔ∏è Mua Khung ·∫¢nh", style=discord.ButtonStyle.success, row=0)
    async def buy_frames(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Kh√¥ng ph·∫£i shop c·ªßa b·∫°n!", ephemeral=True)
            return
        
        await show_frames_shop(interaction)

# ==============================
#  HI·ªÇN TH·ªä SHOP QU√Ä T·∫∂NG
# ==============================
async def show_gifts_shop(interaction: discord.Interaction):
    embed = base_embed(
        "üéÅ C·ª¨A H√ÄNG QU√Ä T·∫∂NG",
        "Mua qu√† ƒë·ªÉ t·∫∑ng ng∆∞·ªùi y√™u v√† tƒÉng ƒë·ªô th√¢n m·∫≠t! üíï\n\n"
        "Ch·ªçn m√≥n qu√† b√™n d∆∞·ªõi:"
    )
    
    shop_items = load_shop_items()
    for name, info in shop_items.items():
        embed.add_field(
            name=f"{name}",
            value=f"üí∞ Gi√°: **{info['price']} xu**\nüìù {info.get('description', 'M√≥n qu√† tuy·ªát v·ªùi')}",
            inline=True
        )
    
    view = BuyGiftView(interaction.user.id)
    await interaction.response.edit_message(embed=embed, view=view)

# ==============================
#  HI·ªÇN TH·ªä SHOP KHUNG ·∫¢NH
# ==============================
async def show_frames_shop(interaction: discord.Interaction):
    user = get_user(interaction.user.id)
    owned_frames = user.get("owned_frames", ["frame_basic"])
    current_xu = user.get("xu", 0)

    embed = discord.Embed(
        title="üñºÔ∏è C·ª¨A H√ÄNG KHUNG ·∫¢NH COUPLE",
        description=f"üí∞ Xu c·ªßa b·∫°n: **{current_xu} xu**\n\n"
                    "Mua khung ƒë·∫πp ƒë·ªÉ trang tr√≠ h·ªì s∆° couple! üíñ\n"
                    "Khung s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng cho c·∫£ 2 ng∆∞·ªùi!",
        color=0xFF1493
    )

    for frame_id, frame in FRAMES_SHOP.items():
        status = "‚úÖ ƒê√£ s·ªü h·ªØu" if frame_id in owned_frames else "üõí Ch∆∞a mua"
        
        embed.add_field(
            name=f"{frame['name']} {status}",
            value=f"üí∞ Gi√°: **{frame['price']} xu**\n"
                  f"üìù {frame['description']}",
            inline=True
        )

    view = BuyFrameView(interaction.user.id, owned_frames)
    await interaction.response.edit_message(embed=embed, view=view)

# ==============================
#  VIEW MUA QU√Ä
# ==============================
class BuyGiftView(View):
    def __init__(self, user_id):
        super().__init__(timeout=60)
        self.user_id = user_id

        items = load_shop_items()
        options = [
            discord.SelectOption(label=name, description=f"{info['price']} xu", value=name)
            for name, info in items.items()
        ]
        self.add_item(GiftSelect(options, user_id))
        
        # N√∫t quay l·∫°i
        back_button = Button(label="‚óÄÔ∏è Quay l·∫°i", style=discord.ButtonStyle.secondary)
        back_button.callback = self.back_callback
        self.add_item(back_button)

    async def back_callback(self, interaction: discord.Interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!", ephemeral=True)
            return
        await open_shop(interaction)

class GiftSelect(Select):
    def __init__(self, options, user_id):
        super().__init__(placeholder="üéÅ Ch·ªçn m√≥n qu√† ƒë·ªÉ mua", options=options)
        self.user_id = user_id

    async def callback(self, interaction: discord.Interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!", ephemeral=True)
            return
        chosen_item = self.values[0]
        await open_quantity_modal(interaction, chosen_item)

# ==============================
#  VIEW MUA KHUNG
# ==============================
class BuyFrameView(View):
    def __init__(self, user_id, owned_frames):
        super().__init__(timeout=60)
        self.user_id = user_id

        # T·∫°o options cho c√°c khung ch∆∞a s·ªü h·ªØu
        options = []
        for frame_id, frame in FRAMES_SHOP.items():
            if frame_id not in owned_frames:
                options.append(
                    discord.SelectOption(
                        label=frame["name"],
                        description=f"{frame['price']} xu",
                        value=frame_id,
                        emoji="üñºÔ∏è"
                    )
                )
        
        if options:
            self.add_item(FrameSelect(options, user_id))
        
        # N√∫t quay l·∫°i
        back_button = Button(label="‚óÄÔ∏è Quay l·∫°i", style=discord.ButtonStyle.secondary)
        back_button.callback = self.back_callback
        self.add_item(back_button)

    async def back_callback(self, interaction: discord.Interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!", ephemeral=True)
            return
        await open_shop(interaction)

class FrameSelect(Select):
    def __init__(self, options, user_id):
        super().__init__(placeholder="üñºÔ∏è Ch·ªçn khung ƒë·ªÉ mua", options=options)
        self.user_id = user_id

    async def callback(self, interaction: discord.Interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!", ephemeral=True)
            return
        
        chosen_frame = self.values[0]
        await handle_frame_purchase(interaction, chosen_frame)

# ==============================
#  M·ªû SHOP
# ==============================
async def open_shop(interaction: discord.Interaction):
    user = get_user(interaction.user.id)
    current_xu = user.get("xu", 0)
    
    embed = base_embed(
        "üõçÔ∏è SHOP T√åNH Y√äU üíò",
        f"üí∞ Xu c·ªßa b·∫°n: **{current_xu} xu**\n\n"
        "D√πng **xu t√¨nh y√™u** ƒë·ªÉ mua qu√† t·∫∑ng v√† khung ·∫£nh!\n\n"
        "Ch·ªçn m·ª•c b·∫°n mu·ªën xem:"
    )
    
    view = ShopMainView(interaction.user.id)
    await interaction.response.edit_message(embed=embed, view=view)

# ==============================
#  XEM T·ª¶ ƒê·ªí
# ==============================
async def open_inventory(interaction: discord.Interaction):
    user = get_user(interaction.user.id)
    inventory = user.get("inventory", {})
    owned_frames = user.get("owned_frames", ["frame_basic"])
    current_frame = user.get("current_frame", "frame_basic")

    embed = discord.Embed(
        title="üéí T·ª¶ ƒê·ªí C·ª¶A B·∫†N",
        description="",
        color=0x9B59B6
    )

    # Hi·ªÉn th·ªã qu√† t·∫∑ng
    if inventory:
        gifts_text = "\n".join([f"üéÅ **{item}** √ó {count}" for item, count in inventory.items()])
        embed.add_field(name="üéÅ Qu√† T·∫∑ng", value=gifts_text, inline=False)
    else:
        embed.add_field(name="üéÅ Qu√† T·∫∑ng", value="*Ch∆∞a c√≥ qu√† n√†o*", inline=False)

    # Hi·ªÉn th·ªã khung ·∫£nh
    if owned_frames:
        frames_list = []
        for f in owned_frames:
            frame = FRAMES_SHOP.get(f)
            if frame:
                status = "‚úÖ ƒêang d√πng" if f == current_frame else ""
                frames_list.append(f"üñºÔ∏è {frame['name']} {status}")
        
        frames_text = "\n".join(frames_list) if frames_list else "üñºÔ∏è Khung C∆° B·∫£n (m·∫∑c ƒë·ªãnh)"
        embed.add_field(name="üñºÔ∏è Khung ·∫¢nh", value=frames_text, inline=False)

    embed.set_footer(text="üí° B·∫•m n√∫t 'Thay khung' ƒë·ªÉ ƒë·ªïi khung ·∫£nh couple")
    
    # Th√™m n√∫t thay khung n·∫øu c√≥ nhi·ªÅu h∆°n 1 khung
    view = None
    if len(owned_frames) > 1:
        view = InventoryView(interaction.user.id, owned_frames, current_frame)
    
    await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


class InventoryView(discord.ui.View):
    """View cho t·ªß ƒë·ªì v·ªõi n√∫t thay khung"""
    def __init__(self, user_id, owned_frames, current_frame):
        super().__init__(timeout=60)
        self.user_id = user_id
        self.owned_frames = owned_frames
        self.current_frame = current_frame
    
    @discord.ui.button(label="üñºÔ∏è Thay khung", style=discord.ButtonStyle.primary)
    async def change_frame_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå ƒê√¢y kh√¥ng ph·∫£i t·ªß ƒë·ªì c·ªßa b·∫°n!", ephemeral=True)
            return
        
        # Hi·ªÉn th·ªã menu ch·ªçn khung
        current_frame_name = FRAMES_SHOP.get(self.current_frame, {}).get('name', 'Kh√¥ng x√°c ƒë·ªãnh')
        
        embed = discord.Embed(
            title="üñºÔ∏è Thay Khung ·∫¢nh Couple",
            description=f"Khung hi·ªán t·∫°i: **{current_frame_name}**\n\n"
                        "Ch·ªçn khung b·∫°n mu·ªën s·ª≠ d·ª•ng:",
            color=0xFF69B4
        )
        
        view = ChangeFrameSelectView(self.user_id, self.owned_frames, self.current_frame)
        await interaction.response.edit_message(embed=embed, view=view)


class ChangeFrameSelectView(discord.ui.View):
    """View v·ªõi select menu ƒë·ªÉ ch·ªçn khung"""
    def __init__(self, user_id, owned_frames, current_frame):
        super().__init__(timeout=60)
        self.user_id = user_id
        
        # T·∫°o select menu
        options = []
        for frame_id in owned_frames:
            frame = FRAMES_SHOP.get(frame_id)
            if frame:
                is_current = "‚úÖ " if frame_id == current_frame else ""
                options.append(
                    discord.SelectOption(
                        label=f"{is_current}{frame['name']}",
                        value=frame_id,
                        description=frame['description'][:100],
                        emoji="üñºÔ∏è"
                    )
                )
        
        if options:
            self.add_item(InventoryFrameSelect(options, user_id))


class InventoryFrameSelect(discord.ui.Select):
    """Select menu ƒë·ªÉ ch·ªçn khung t·ª´ t·ªß ƒë·ªì"""
    def __init__(self, options, user_id):
        super().__init__(
            placeholder="üñºÔ∏è Ch·ªçn khung b·∫°n mu·ªën s·ª≠ d·ª•ng...",
            options=options,
            min_values=1,
            max_values=1
        )
        self.user_id = user_id
    
    async def callback(self, interaction: discord.Interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå ƒê√¢y kh√¥ng ph·∫£i menu c·ªßa b·∫°n!", ephemeral=True)
            return
        
        selected_frame = self.values[0]
        
        # L·∫•y d·ªØ li·ªáu user
        user_data = get_user(interaction.user.id)
        partner_id = user_data.get("love_partner")
        
        if not partner_id:
            await interaction.response.send_message(
                embed=error_embed("üíî B·∫°n ch∆∞a c√≥ ng∆∞·ªùi y√™u!"),
                ephemeral=True
            )
            return
        
        # ƒê·ªïi khung cho c·∫£ 2 ng∆∞·ªùi
        user_data["current_frame"] = selected_frame
        update_user(interaction.user.id, user_data)

        partner_data = get_user(partner_id)
        partner_data["current_frame"] = selected_frame
        update_user(partner_id, partner_data)

        frame = FRAMES_SHOP[selected_frame]
        
        embed = discord.Embed(
            title="‚úÖ ƒê·ªïi khung th√†nh c√¥ng!",
            description=f"ƒê√£ ƒë·ªïi khung couple th√†nh **{frame['name']}**\n"
                        f"Khung ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng cho c·∫£ 2 ng∆∞·ªùi! üíñ",
            color=0x00FF00
        )
        embed.set_image(url=frame["url"])
        embed.set_footer(text="üíï H√£y xem h·ªì s∆° couple ƒë·ªÉ th·∫•y khung m·ªõi!")
        
        await interaction.response.edit_message(embed=embed, view=None)

# ==============================
#  COG CH√çNH
# ==============================
class Shop(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        print("üõçÔ∏è shop.py ƒë√£ ƒë∆∞·ª£c load")

    @commands.Cog.listener()
    async def on_interaction(self, interaction: discord.Interaction):
        if not interaction.data or "custom_id" not in interaction.data:
            return

        if interaction.data["custom_id"] == "shop":
            await open_shop(interaction)
        elif interaction.data["custom_id"] == "inventory":
            await open_inventory(interaction)

async def setup(bot):
    await bot.add_cog(Shop(bot))
